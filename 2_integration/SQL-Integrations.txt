SELECT ID,
       Stations_ID,
       MESS_DATUM,
       QN_9,
       TT_TU,
       RF_TU,
       strftime('%Y %m %d %H %M %S',MESS_DATUM) <=== Funktion um datetime umzuformen
  FROM air_temperature
  WHERE ID < 200


1. Join ohne genauen tag, aber mit position
2. Speichere Stations-ID und genaues datum in neuer tabelle (jede spalte wird vervierfacht)
3. Nächste joins gehen über Stations-ID + genaues datum




SELECT b.ID
FROM unfall_data AS a
RIGHT JOIN air_temperature AS b
 ON a.UJAHR = strftime('%Y', b.MESS_DATUM)
 AND a.UMONAT = strftime('%m', b.MESS_DATUM)
 AND a.USTUNDE = strftime('%H', b.MESS_DATUM)



SELECT b.*
FROM unfall_data AS a
RIGHT JOIN air_temperature AS b
 ON a.UJAHR = strftime('%Y', b.MESS_DATUM)
 AND a.UMONAT = strftime('%m', b.MESS_DATUM)
 AND a.USTUNDE = strftime('%H', b.MESS_DATUM)





1. Lade alle möglichen einträge von air_temperature
2. Selectiere für diese dann den dazugehörigen Standort

SELECT a.*, b."Geogr.Breite", b."Geogr.Laenge"
  FROM (SELECT b.Stations_ID, b.MESS_DATUM, b.TT_TU, b.RF_TU
   FROM unfall_data AS a
   RIGHT JOIN air_temperature AS b
    ON a.UJAHR = strftime('%Y', b.MESS_DATUM)
    AND a.UMONAT = strftime('%m', b.MESS_DATUM)
    AND a.USTUNDE = strftime('%H', b.MESS_DATUM)) AS a
  INNER JOIN Metadaten_Geographie AS b
  ON a.Stations_ID = b.Stations_ID
  AND b.Von_Datum < a.MESS_DATUM
  AND (CASE WHEN b.Bis_Datum NOT NULL THEN (b.Bis_Datum > a.MESS_DATUM)
  ELSE TRUE END)
    ORDER BY a.Stations_ID,
    b.Von_Datum ASC,
    b.Bis_Datum DESC

SELECT a.*, b."Geogr.Breite", b."Geogr.Laenge"
  FROM (SELECT b.Stations_ID, b.MESS_DATUM, b.TT_TU, b.RF_TU
   FROM unfall_data AS a
   JOIN air_temperature AS b
    ON a.UJAHR = strftime('%Y', b.MESS_DATUM)
    AND a.UMONAT = strftime('%m', b.MESS_DATUM)
    AND a.USTUNDE = strftime('%H', b.MESS_DATUM)) AS a
  INNER JOIN Metadaten_Geographie AS b
  ON a.Stations_ID = b.Stations_ID
  AND b.Von_Datum < a.MESS_DATUM
  AND (CASE WHEN b.Bis_Datum NOT NULL THEN (b.Bis_Datum > a.MESS_DATUM)
  ELSE TRUE END)
GROUP BY a.Stations_ID, a.MESS_DATUM

Ansatz ändern:
Erst unfall_data mit Metadaten_Geographie mappen (eindeutig eine stationsid zuweisen)
Dann über zeit und stationsid mit gemessenen daten verbinden


###########################################################################
################ Combine unfall_data with Stations_ID #####################
###########################################################################

SELECT a.*, b.Stations_ID, b.Von_Datum, b.Bis_Datum, b."Geogr.Breite", b."Geogr.Laenge", SQRT(POWER((b."Geogr.Breite" - a.YGCSWGS84), 2) + POWER((b."Geogr.Laenge" - a.XGCSWGS84), 2)) as distance
FROM unfall_data AS a
LEFT JOIN Metadaten_Geographie AS b
ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE
    ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE
    	ELSE FALSE END)
    	ELSE FALSE END) END)
AND (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE
    ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE
    	ELSE FALSE END)
    	ELSE FALSE END) END)
ELSE TRUE END)
ORDER BY a.ID, distance

FORMATIERT =====>

SELECT a.*,
       b.Stations_ID,
       b.Von_Datum,
       b.Bis_Datum,
       b.[Geogr.Breite],
       b.[Geogr.Laenge],
       SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS distance
  FROM unfall_data AS a
       LEFT JOIN
       Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                    (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
 ORDER BY a.ID,
          distance;

FERTIGE ABFRAGE =====>

SELECT *
  FROM (
           SELECT a.*,
                  b.Stations_ID,
                  SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS distance
             FROM unfall_data AS a
                  LEFT JOIN
                  Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                               (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
            ORDER BY a.ID,
                     distance
       )
 GROUP BY ID;
//wenn jahr größer ist, dann reicht das.
//sonst prüfe ob es gleich ist
//Da wir keinen Tag haben, nehmen wir immer worst case (erster bzw. letzter tag des monats)
//Da wir von worst case ausgehen, muss der monat immer größer bzw. kleiner sein


CREATE TABLE unfall_Geographie_data (
    ID          INTEGER PRIMARY KEY AUTOINCREMENT,
    UGEMEINDE   INTEGER,
    UJAHR       INTEGER,
    UMONAT      INTEGER,
    USTUNDE     INTEGER,
    UWOCHENTAG  INTEGER,
    UKATEGORIE  INTEGER,
    UART        INTEGER,
    UTYP1       INTEGER,
    ULICHTVERH  INTEGER,
    IstRad      INTEGER,
    IstPKW      INTEGER,
    IstFuss     INTEGER,
    IstKrad     INTEGER,
    IstGkfz     INTEGER,
    IstSonstige INTEGER,
    LINREFX     REAL,
    LINREFY     REAL,
    XGCSWGS84   REAL,
    YGCSWGS84   REAL,
    STRZUSTAND  INTEGER,
    Stations_ID INTEGER,
    Distance    REAL
);

INSERT INTO unfall_Geographie_data SELECT *
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM unfall_data AS a
                                                     LEFT JOIN
                                                     Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    GROUP BY ID;

//use python script to get each row 4 times with new spezific dates

###########################################################################
################ Combine unfall_data with measurements ####################
###########################################################################




//TEMP SOLUTION!!!
INSERT INTO unfall_Geographie_data SELECT ID,
                                          UGEMEINDE,
                                          UJAHR,
                                          UMONAT,
                                          USTUNDE,
                                          UWOCHENTAG,
                                          UKATEGORIE,
                                          UART,
                                          UTYP1,
                                          ULICHTVERH,
                                          IstRad,
                                          IstPKW,
                                          IstFuss,
                                          IstKrad,
                                          IstGkfz,
                                          IstSonstige,
                                          LINREFX,
                                          LINREFY,
                                          XGCSWGS84,
                                          YGCSWGS84,
                                          STRZUSTAND,
                                          Stations_ID,
                                          Distance
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     b.Von_Datum,
                                                     b.Bis_Datum,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM (
                                                         SELECT *
                                                           FROM unfall_data
                                                          WHERE ID < 1000
                                                     )
                                                     AS a
                                                     CROSS JOIN
                                                     Metadaten_Geographie AS b
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    WHERE (CASE WHEN UJAHR > strftime('%Y', Von_Datum) THEN TRUE ELSE (CASE WHEN UJAHR = strftime('%Y', Von_Datum) THEN (CASE WHEN UMONAT > strftime('%m', Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                          (CASE WHEN Bis_Datum NOT NULL THEN (CASE WHEN UJAHR < strftime('%Y', Bis_Datum) THEN TRUE ELSE (CASE WHEN UJAHR = strftime('%Y', bis_Datum) THEN (CASE WHEN UMONAT < strftime('%m', Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                    GROUP BY ID;



INSERT INTO unfall_Geographie_data SELECT *
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM (SELECT * FROM unfall_data WHERE ID < 1000) AS a
                                                     LEFT JOIN
                                                     Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    GROUP BY ID;