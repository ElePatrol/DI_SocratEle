strftime('%Y %m %d %H %M %S',MESS_DATUM) <=== Funktion um datetime umzuformen

###########################################################################
################ Combine unfall_data with Stations_ID #####################
###########################################################################

SELECT a.*, b.Stations_ID, b.Von_Datum, b.Bis_Datum, b."Geogr.Breite", b."Geogr.Laenge", SQRT(POWER((b."Geogr.Breite" - a.YGCSWGS84), 2) + POWER((b."Geogr.Laenge" - a.XGCSWGS84), 2)) as distance
FROM unfall_data AS a
LEFT JOIN Metadaten_Geographie AS b
ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE
    ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE
    	ELSE FALSE END)
    	ELSE FALSE END) END)
AND (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE
    ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE
    	ELSE FALSE END)
    	ELSE FALSE END) END)
ELSE TRUE END)
ORDER BY a.ID, distance

FORMATIERT =====>

SELECT a.*,
       b.Stations_ID,
       b.Von_Datum,
       b.Bis_Datum,
       b.[Geogr.Breite],
       b.[Geogr.Laenge],
       SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS distance
  FROM unfall_data AS a
       LEFT JOIN
       Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                    (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
 ORDER BY a.ID,
          distance;

FERTIGE ABFRAGE =====>

SELECT *
  FROM (
           SELECT a.*,
                  b.Stations_ID,
                  SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS distance
             FROM unfall_data AS a
                  LEFT JOIN
                  Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                               (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
            ORDER BY a.ID,
                     distance
       )
 GROUP BY ID;
######### ALTERNATIVE SOLUTION ##############################
//TEMP SOLUTION!!!
SELECT *
FROM (SELECT a.*,
                  b.Stations_ID,
		  b.Von_Datum,
		  b.Bis_Datum,
                  SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
             FROM unfall_data AS a
                  CROSS JOIN Metadaten_Geographie AS b
            ORDER BY a.ID,
                     Distance)
WHERE (CASE WHEN UJAHR > strftime('%Y', Von_Datum) THEN TRUE ELSE (CASE WHEN UJAHR = strftime('%Y', Von_Datum) THEN (CASE WHEN UMONAT > strftime('%m', Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN Bis_Datum NOT NULL THEN (CASE WHEN UJAHR < strftime('%Y', Bis_Datum) THEN TRUE ELSE (CASE WHEN UJAHR = strftime('%Y', bis_Datum) THEN (CASE WHEN UMONAT < strftime('%m', Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
GROUP BY ID
#############################################################

SPEICHERE DATEN =====>
//wenn jahr größer ist, dann reicht das.
//sonst prüfe ob es gleich ist
//Da wir keinen Tag haben, nehmen wir immer worst case (erster bzw. letzter tag des monats)
//Da wir von worst case ausgehen, muss der monat immer größer bzw. kleiner sein
CREATE TABLE unfall_Geographie_data (
    ID          INTEGER PRIMARY KEY AUTOINCREMENT,
    UGEMEINDE   INTEGER,
    UJAHR       INTEGER,
    UMONAT      INTEGER,
    USTUNDE     INTEGER,
    UWOCHENTAG  INTEGER,
    UKATEGORIE  INTEGER,
    UART        INTEGER,
    UTYP1       INTEGER,
    ULICHTVERH  INTEGER,
    IstRad      INTEGER,
    IstPKW      INTEGER,
    IstFuss     INTEGER,
    IstKrad     INTEGER,
    IstGkfz     INTEGER,
    IstSonstige INTEGER,
    LINREFX     REAL,
    LINREFY     REAL,
    XGCSWGS84   REAL,
    YGCSWGS84   REAL,
    STRZUSTAND  INTEGER,
    Stations_ID INTEGER,
    Distance    REAL
);

INSERT INTO unfall_Geographie_data SELECT *
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM unfall_data AS a
                                                     LEFT JOIN
                                                     Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    GROUP BY ID;

INSERT INTO unfall_Geographie_data SELECT *
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM (
                                                         SELECT *
                                                           FROM unfall_data
                                                          WHERE ID < 100000
                                                     )
                                                     AS a
                                                     LEFT JOIN
                                                     Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    GROUP BY ID;

INSERT INTO unfall_Geographie_data SELECT *
                                     FROM (
                                              SELECT a.*,
                                                     b.Stations_ID,
                                                     SQRT(POWER( (b.[Geogr.Breite] - a.YGCSWGS84), 2) + POWER( (b.[Geogr.Laenge] - a.XGCSWGS84), 2) ) AS Distance
                                                FROM (
                                                         SELECT *
                                                           FROM unfall_data
                                                          WHERE ID >= 100000 AND 
                                                                ID < 200000
                                                     )
                                                     AS a
                                                     LEFT JOIN
                                                     Metadaten_Geographie AS b ON (CASE WHEN a.UJAHR > strftime('%Y', b.Von_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.Von_Datum) THEN (CASE WHEN a.UMONAT > strftime('%m', b.Von_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) AND 
                                                                                  (CASE WHEN b.Bis_Datum NOT NULL THEN (CASE WHEN a.UJAHR < strftime('%Y', b.Bis_Datum) THEN TRUE ELSE (CASE WHEN a.UJAHR = strftime('%Y', b.bis_Datum) THEN (CASE WHEN a.UMONAT < strftime('%m', b.Bis_Datum) THEN TRUE ELSE FALSE END) ELSE FALSE END) END) ELSE TRUE END) 
                                               ORDER BY a.ID,
                                                        Distance
                                          )
                                    GROUP BY ID;


###########################################################################
################ Combine unfall_data with measurements ####################
###########################################################################

CREATE TABLE unfall_Geographie_data_3 (
    UJAHR          INTEGER,
    UMONAT         INTEGER,
    USTUNDE        INTEGER,
    UTAG           INTEGER,
    UKATEGORIE     INTEGER,
    UART           INTEGER,
    UTYP1          INTEGER,
    ULICHTVERH     INTEGER,
    STRZUSTAND     INTEGER,
    YGCSWGS84      REAL,
    XGCSWGS84      REAL,
    TT_TU          REAL,
    RF_TU          INTEGER,
    V_N_CTYPE      INTEGER,
    V_N_I_CTYPE    TEXT,
    V_S1_CS        INTEGER,
    V_S1_CSA       INTEGER,
    V_S1_HHS       INTEGER,
    V_S1_NS        INTEGER,
    V_S2_CS        INTEGER,
    V_S2_CSA       INTEGER,
    V_S2_HHS       INTEGER,
    V_S2_NS        INTEGER,
    V_S3_CS        INTEGER,
    V_S3_CSA       INTEGER,
    V_S3_HHS       INTEGER,
    V_S3_NS        INTEGER,
    V_S4_CS        INTEGER,
    V_S4_CSA       INTEGER,
    V_S4_HHS       INTEGER,
    V_S4_NS        INTEGER,
    V_N_I_CNESS    TEXT,
    V_N_CNESS      INTEGER,
    TT             REAL,
    TD             REAL,
    FX_911         REAL,
    ABSF_STD       REAL,
    VP_STD         REAL,
    TF_STD         REAL,
    P_STD          INTEGER,
    TT_STD         REAL,
    RF_STD         REAL,
    TD_STD         REAL,
    R1             REAL,
    RS_IND         INTEGER,
    WRTR           INTEGER,
    P              INTEGER,
    P0             INTEGER,
    V_TE002        INTEGER,
    V_TE005        REAL,
    V_TE010        REAL,
    V_TE020        REAL,
    V_TE050        REAL,
    V_TE100        REAL,
    ATMO_LBERG     INTEGER,
    FD_LBERG       INTEGER,
    FG_LBERG       INTEGER,
    SD_LBERG       INTEGER,
    ZENIT          DATE,
    MESS_DATUM_WOZ INTEGER,
    SD_SO          INTEGER,
    V_VV_I         TEXT,
    V_VV           INTEGER,
    WW             INTEGER,
    WW_Text        TEXT,
    F              REAL,
    D              INTEGER,
    FF             REAL,
    DD             INTEGER
);

INSERT INTO unfall_Geographie_data_3 SELECT a.UJAHR,
       a.UMONAT,
       a.USTUNDE,
       a.UTAG,
       a.UKATEGORIE,
       a.UART,
       a.UTYP1,
       a.ULICHTVERH,
       a.STRZUSTAND,
       a.YGCSWGS84,
       a.XGCSWGS84,
       b.TT_TU,
       b.RF_TU,
       c.V_N,
       c.V_N_I,
       c.V_S1_CS,
       c.V_S1_CSA,
       c.V_S1_HHS,
       c.V_S1_NS,
       c.V_S2_CS,
       c.V_S2_CSA,
       c.V_S2_HHS,
       c.V_S2_NS,
       c.V_S3_CS,
       c.V_S3_CSA,
       c.V_S3_HHS,
       c.V_S3_NS,
       c.V_S4_CS,
       c.V_S4_CSA,
       c.V_S4_HHS,
       c.V_S4_NS,
       d.V_N_I,
       d.V_N,
       e.TT,
       e.TD,
       f.FX_911,
       g.ABSF_STD,
       g.VP_STD,
       g.TF_STD,
       g.P_STD,
       g.TT_STD,
       g.RF_STD,
       g.TD_STD,
       h.R1,
       h.RS_IND,
       h.WRTR,
       i.P,
       i.P0,
       j.V_TE002,
       j.V_TE005,
       j.V_TE010,
       j.V_TE020,
       j.V_TE050,
       j.V_TE100,
       k.ATMO_LBERG,
       k.FD_LBERG,
       k.FG_LBERG,
       k.SD_LBERG,
       k.ZENIT,
       k.MESS_DATUM_WOZ,
       l.SD_SO,
       m.V_VV_I,
       m.V_VV,
       n.WW,
       n.WW_Text,
       o.F,
       o.D,
       p.FF,
       p.DD
  FROM unfall_Geographie_data_2 AS a
       INNER JOIN
       air_temperature AS b ON a.Stations_ID = b.Stations_ID AND 
                               a.UJAHR = strftime('%Y', b.MESS_DATUM) AND 
                               a.UMONAT = strftime('%m', b.MESS_DATUM) AND 
                               a.UTAG = strftime('%d', b.MESS_DATUM) AND 
                               a.USTUNDE = strftime('%H', b.MESS_DATUM) 
       INNER JOIN
       cloud_type AS c ON a.Stations_ID = c.Stations_ID AND 
                          a.UJAHR = strftime('%Y', c.MESS_DATUM) AND 
                          a.UMONAT = strftime('%m', c.MESS_DATUM) AND 
                          a.UTAG = strftime('%d', c.MESS_DATUM) AND 
                          a.USTUNDE = strftime('%H', c.MESS_DATUM) 
       INNER JOIN
       cloudiness AS d ON a.Stations_ID = d.Stations_ID AND 
                          a.UJAHR = strftime('%Y', d.MESS_DATUM) AND 
                          a.UMONAT = strftime('%m', d.MESS_DATUM) AND 
                          a.UTAG = strftime('%d', d.MESS_DATUM) AND 
                          a.USTUNDE = strftime('%H', d.MESS_DATUM) 
       INNER JOIN
       dew_point AS e ON a.Stations_ID = e.Stations_ID AND 
                         a.UJAHR = strftime('%Y', e.MESS_DATUM) AND 
                         a.UMONAT = strftime('%m', e.MESS_DATUM) AND 
                         a.UTAG = strftime('%d', e.MESS_DATUM) AND 
                         a.USTUNDE = strftime('%H', e.MESS_DATUM) 
       INNER JOIN
       extreme_wind AS f ON a.Stations_ID = f.Stations_ID AND 
                            a.UJAHR = strftime('%Y', f.MESS_DATUM) AND 
                            a.UMONAT = strftime('%m', f.MESS_DATUM) AND 
                            a.UTAG = strftime('%d', f.MESS_DATUM) AND 
                            a.USTUNDE = strftime('%H', f.MESS_DATUM) 
       INNER JOIN
       moisture AS g ON a.Stations_ID = g.Stations_ID AND 
                        a.UJAHR = strftime('%Y', g.MESS_DATUM) AND 
                        a.UMONAT = strftime('%m', g.MESS_DATUM) AND 
                        a.UTAG = strftime('%d', g.MESS_DATUM) AND 
                        a.USTUNDE = strftime('%H', g.MESS_DATUM) 
       INNER JOIN
       precipitation AS h ON a.Stations_ID = h.Stations_ID AND 
                             a.UJAHR = strftime('%Y', h.MESS_DATUM) AND 
                             a.UMONAT = strftime('%m', h.MESS_DATUM) AND 
                             a.UTAG = strftime('%d', h.MESS_DATUM) AND 
                             a.USTUNDE = strftime('%H', h.MESS_DATUM) 
       INNER JOIN
       pressure AS i ON a.Stations_ID = i.Stations_ID AND 
                        a.UJAHR = strftime('%Y', i.MESS_DATUM) AND 
                        a.UMONAT = strftime('%m', i.MESS_DATUM) AND 
                        a.UTAG = strftime('%d', i.MESS_DATUM) AND 
                        a.USTUNDE = strftime('%H', i.MESS_DATUM) 
       INNER JOIN
       soil_temperature AS j ON a.Stations_ID = j.Stations_ID AND 
                                a.UJAHR = strftime('%Y', j.MESS_DATUM) AND 
                                a.UMONAT = strftime('%m', j.MESS_DATUM) AND 
                                a.UTAG = strftime('%d', j.MESS_DATUM) AND 
                                a.USTUNDE = strftime('%H', j.MESS_DATUM) 
       INNER JOIN
       solar AS k ON a.Stations_ID = k.Stations_ID AND 
                     a.UJAHR = strftime('%Y', k.MESS_DATUM) AND 
                     a.UMONAT = strftime('%m', k.MESS_DATUM) AND 
                     a.UTAG = strftime('%d', k.MESS_DATUM) AND 
                     a.USTUNDE = strftime('%H', k.MESS_DATUM) 
       INNER JOIN
       sun AS l ON a.Stations_ID = l.Stations_ID AND 
                   a.UJAHR = strftime('%Y', l.MESS_DATUM) AND 
                   a.UMONAT = strftime('%m', l.MESS_DATUM) AND 
                   a.UTAG = strftime('%d', l.MESS_DATUM) AND 
                   a.USTUNDE = strftime('%H', l.MESS_DATUM) 
       INNER JOIN
       visibility AS m ON a.Stations_ID = m.Stations_ID AND 
                          a.UJAHR = strftime('%Y', m.MESS_DATUM) AND 
                          a.UMONAT = strftime('%m', m.MESS_DATUM) AND 
                          a.UTAG = strftime('%d', m.MESS_DATUM) AND 
                          a.USTUNDE = strftime('%H', m.MESS_DATUM) 
       INNER JOIN
       weather_phenomena AS n ON a.Stations_ID = n.Stations_ID AND 
                                 a.UJAHR = strftime('%Y', n.MESS_DATUM) AND 
                                 a.UMONAT = strftime('%m', n.MESS_DATUM) AND 
                                 a.UTAG = strftime('%d', n.MESS_DATUM) AND 
                                 a.USTUNDE = strftime('%H', n.MESS_DATUM) 
       INNER JOIN
       wind AS o ON a.Stations_ID = o.Stations_ID AND 
                    a.UJAHR = strftime('%Y', o.MESS_DATUM) AND 
                    a.UMONAT = strftime('%m', o.MESS_DATUM) AND 
                    a.UTAG = strftime('%d', o.MESS_DATUM) AND 
                    a.USTUNDE = strftime('%H', o.MESS_DATUM) 
       INNER JOIN
       wind_synop AS p ON a.Stations_ID = p.Stations_ID AND 
                          a.UJAHR = strftime('%Y', p.MESS_DATUM) AND 
                          a.UMONAT = strftime('%m', p.MESS_DATUM) AND 
                          a.UTAG = strftime('%d', p.MESS_DATUM) AND 
                          a.USTUNDE = strftime('%H', p.MESS_DATUM)

FOR SHORTER TABLE =====>

CREATE TABLE unfall_Geographie_data_3 (
    UJAHR          INTEGER,
    UMONAT         INTEGER,
    USTUNDE        INTEGER,
    UTAG           INTEGER,
    UKATEGORIE     INTEGER,
    UART           INTEGER,
    UTYP1          INTEGER,
    ULICHTVERH     INTEGER,
    STRZUSTAND     INTEGER,
    YGCSWGS84      REAL,
    XGCSWGS84      REAL,
    TT_TU          REAL,
    RF_TU          INTEGER
);

INSERT INTO unfall_Geographie_data_3 SELECT a.UJAHR,
       a.UMONAT,
       a.USTUNDE,
       a.UTAG,
       a.UKATEGORIE,
       a.UART,
       a.UTYP1,
       a.ULICHTVERH,
       a.STRZUSTAND,
       a.YGCSWGS84,
       a.XGCSWGS84,
       b.TT_TU,
       b.RF_TU
  FROM unfall_Geographie_data_2 AS a
       INNER JOIN
       air_temperature AS b ON a.Stations_ID = b.Stations_ID AND 
                               a.UJAHR = strftime('%Y', b.MESS_DATUM) AND 
                               a.UMONAT = strftime('%m', b.MESS_DATUM) AND 
                               a.UTAG = strftime('%d', b.MESS_DATUM) AND 
                               a.USTUNDE = strftime('%H', b.MESS_DATUM);


###########################################################################
###################### Parameter für Auswertung ###########################
###########################################################################

SELECT *
FROM Metadaten_Parameter
GROUP BY Parameter
